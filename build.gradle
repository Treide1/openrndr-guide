group 'org.openrndr.guide'
version '1.0-SNAPSHOT'

import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        maven { url "https://maven.openrndr.org" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath libs.kotlin.gradle.plugin
        classpath libs.gradle.git.publish
        classpath libs.dokgen
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'org.openrndr.dokgen-gradle'
apply plugin: 'org.ajoberstar.git-publish'

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

sourceCompatibility = 1.8
project.ext.openrndrVersion = libs.versions.openrndr.get()
project.ext.orxVersion = libs.versions.orx.get()

repositories {
    mavenCentral()
    mavenLocal()
    maven { url "https://maven.openrndr.org" }
    maven { url "https://jitpack.io" }
}

switch (org.gradle.internal.os.OperatingSystem.current()) {
    case org.gradle.internal.os.OperatingSystem.WINDOWS:
        project.ext.openrndrOS = "windows"
        break
    case org.gradle.internal.os.OperatingSystem.LINUX:
        project.ext.openrndrOS = "linux-x64"
        break
    case org.gradle.internal.os.OperatingSystem.MAC_OS:
        project.ext.openrndrOS = "macos"
        break
}

dependencies {
    implementation libs.kotlin.stdlib
    implementation libs.kotlinx.coroutines
    testImplementation libs.junit
    implementation libs.slf4j.simple
    implementation libs.bundles.openrndr.core
    implementation libs.bundles.openrndr.rest
    implementation "org.openrndr:openrndr-gl3-natives-$openrndrOS:$openrndrVersion"
    implementation libs.bundles.orx
    implementation libs.dokgen
}

mainClassName = "TemplateProgramKt"

dokgen {
    runner {
        if (System.properties['os.name'] == "Mac OS X") {
            jvmArgs = ["-XstartOnFirstThread"]
        }
    }

    examples {
        webRootUrl = "https://github.com/openrndr/openrndr-examples/blob/master/src/main/kotlin"
    }

    jekyll {
        media = [file("$projectDir/media"), file("$projectDir/static-media")]
        assets = [file("$projectDir/data/jekyll-assets")]
    }
}

task publishDocs { task ->
    description "Publish website to github.com/openrndr/openrndr-guide"
    doLast {
        gitPublish.repoUri = "git@github.com:openrndr/openrndr-guide.git"
        gitPublish.branch = "generated"
        gitPublish.repoDir = file("$buildDir/gitrepo-docs")
        gitPublish.contents.from("build/dokgen/jekyll") {
            exclude "docs/.jekyll*", "docs/_site", "docs/*-cache", "docs/*.sh"
        }
        gitPublish.commitMessage = "Update docs"
    }

    task.group = "dokgen"
    task.finalizedBy(gitPublishPush)
}

static String getRepoLastVersion(String repo) {
    def response = ["git", "ls-remote", "--refs", "--tags", repo].execute().text
    return response.split("\n").collect {
        def parts = it.split("refs/tags/v")
        if(parts.length == 2) parts[1] else ""
    }.findAll { it != "" }.last()
}

task publishExamples { task ->
    description "Publish examples to github.com/openrndr/openrndr-examples"
    def openrndrVersion = getRepoLastVersion("https://github.com/openrndr/openrndr")
    def orxVersion = getRepoLastVersion("https://github.com/openrndr/orx")
    doLast {
        gitPublish.repoDir = file("$buildDir/gitrepo-examples")
        gitPublish.contents {
            from("$projectDir/src/main/resources/examples-repo-template") {
                exclude '**.*.kts'
            }
            from("$projectDir/src/main/resources/examples-repo-template") {
                include '**.*.kts'
                filter(ReplaceTokens, tokens: [
                        openrndrVersion: openrndrVersion,
                        orxVersion: orxVersion
                ])
            }
            from("$projectDir/build/dokgen/generated/examples-export") {
                into "src/main/kotlin/examples"
            }
            from("$projectDir/data/images") {
                into "data/images"
            }
            from("$projectDir/data/compute-shaders") {
                into "data/compute-shaders"
            }
        }
        gitPublish.repoUri = "git@github.com:openrndr/openrndr-examples.git"
        gitPublish.branch = "master"
        gitPublish.commitMessage = "Update examples"
    }
    task.group = "dokgen"
    task.finalizedBy(gitPublishPush)
}

ext.mainClassName = mainClassName
jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
    doFirst {
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
        from { configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) } }
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA', '**/module-info*'
    archiveName 'myjar.jar'
}
